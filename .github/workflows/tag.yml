name: Tag Management

on:
  pull_request:
    types: [labeled, closed]
  push:
    branches:
      - main

jobs:
  tag:
    if: |
      (github.event_name == 'pull_request' &&
       github.event.action == 'labeled' &&
       (contains(github.event.pull_request.labels.*.name, 'version:major') ||
        contains(github.event.pull_request.labels.*.name, 'version:minor') ||
        contains(github.event.pull_request.labels.*.name, 'version:patch'))) ||
      (github.event_name == 'pull_request' &&
       github.event.action == 'closed' &&
       github.event.pull_request.merged == true) ||
      (github.event_name == 'push' &&
       github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: get_version
        run: |
          # Get the latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}

          # Determine version bump type
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.action }}" == "labeled" ]]; then
              if contains(github.event.pull_request.labels.*.name, 'version:major'); then
                BUMP_TYPE="major"
              elif contains(github.event.pull_request.labels.*.name, 'version:minor'); then
                BUMP_TYPE="minor"
              elif contains(github.event.pull_request.labels.*.name, 'version:patch'); then
                BUMP_TYPE="patch"
              else
                echo "No version label provided. Skipping version bump."
                exit 0
              fi
            else
              # PR was closed/merged without version label
              # Check PR title and body for conventional commit types
              PR_TITLE="${{ github.event.pull_request.title }}"
              PR_BODY="${{ github.event.pull_request.body }}"

              if [[ "$PR_TITLE" =~ ^(feat|feature)(\([a-z0-9-]+\))?: ]]; then
                BUMP_TYPE="minor"
              elif [[ "$PR_TITLE" =~ ^(fix|bugfix|hotfix)(\([a-z0-9-]+\))?: ]]; then
                BUMP_TYPE="patch"
              elif [[ "$PR_TITLE" =~ ^(breaking|break)(\([a-z0-9-]+\))?: ]]; then
                BUMP_TYPE="major"
              else
                # Default to patch for merged PRs without clear indicators
                BUMP_TYPE="patch"
              fi
            fi
          else
            # Default to patch for direct pushes to main
            BUMP_TYPE="patch"
          fi

          # Bump version
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          case "$BUMP_TYPE" in
            major) NEW_VERSION="$((major + 1)).0.0" ;;
            minor) NEW_VERSION="$major.$((minor + 1)).0" ;;
            patch) NEW_VERSION="$major.$minor.$((patch + 1))" ;;
          esac

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ steps.get_version.outputs.new_version }}" -m "Release v${{ steps.get_version.outputs.new_version }} (bump: ${{ steps.get_version.outputs.bump_type }})"
          git push origin "v${{ steps.get_version.outputs.new_version }}"
